Kubernetes:
    - a deployment is responsible for keeping a set of pods running
    - a service is responsible for enabling internal or external network access 
    to a set of pods
    - A cluster contains a set of nodes and each pod contains nodes
    - Skaffold: handles CI and applies updates to src and infra files to cluster

Skaffold:
    - deploy section describes where we should look for updates to deployments scripts
    - build section describes where to look for updates to src code
    - running skaffold dev runs skaffold file, which deploys everything in infra/k8s
    and watches for updates to those files + specified src files
    - without Skaffold, we would apply all services using kubectl

Ingress NGINX:
    - Ingress Controller provides services for delivering and distributing client 
    web requests to Kubernetes cluster

Local Development Environment: equivalent of running all pods on our local machine

Google Cloud Development:
    - making changes to specifically synced files (i.e. the ones listed under sync in the
    skaffold file will automatically update the code in our pods)
    - making changes to non-synced files (e.g. package.json) will automatically tell Google
    Cloud Build to rebuild our docker image and update its deployment

Error Handling:
    - when error is thrown in Express server, error is sent detected by express and sent to
    error handling middleware being used by app
    - we implement overarching CustomError abstract class so we can have requirements that
    error types conform to and so we can call properly call serializeError on anything that 
    conforms to CustomError with the guarantee that the serializeError is implemented and
    that there is a statusCode field

MongoDB:
    - model describes the entire collection of objects (e.g. collection of users)
    - schema defines a single object in the collection (e.g. a single user)

Interfaces and Abstract Classes:
    - an interface simply defines properties and functions with no implementation and can
    only inherit from other interfaces
    - an abstract class can inherit properties and implementations from other classes and
    definitions from interfaces (as long as it implements them)

General JavaScript:
    - using arrow function instead of regular declaration stops you from being able to use this on callback
    - JSON Web Tokens Refresher:
        - user sends in payload with user id, username, expiration, etc
        - server takes payload, signs payload with user's secret key (stored in server), appends 
        signature to JWT (response), and sends JWT back to user
        - if user changes any part of payload, signature won't match payload
        - all that needs to be verified when using JWT for auth is that signature matches payload x key
    - Cookie Auth Refresher:
        - after authentication, server stores a session ID and sends a copy back to the user
        - user must hold this session ID every time they want to make a request
    - Server-Side Rendering vs. Browser-Side Rendering:
        - server-side: server renders entire HTML file (and JavaScript) then sends it back to user
        - browser-side: server sends HTML file with script tags and browser loads JavaScript itself